/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 17 02:22:32 GMT 2022
 */

package sg.edu.nus.comp.cs4218.impl.app.args;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;

import static org.evosuite.runtime.EvoAssertions.*;

import org.evosuite.runtime.EvoRunnerJUnit5;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.jupiter.api.extension.RegisterExtension;
import sg.edu.nus.comp.cs4218.impl.app.args.MvArguments;

@SuppressWarnings("PMD")
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class MvArguments_ESTest extends MvArguments_ESTest_scaffolding {
    @RegisterExtension
    static EvoRunnerJUnit5 runner = new EvoRunnerJUnit5(MvArguments_ESTest.class);

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test0() throws Throwable {
        MvArguments mvArguments0 = new MvArguments();
        String[] stringArray0 = new String[1];
        stringArray0[0] = "-";
        mvArguments0.parse(stringArray0);
        assertTrue(mvArguments0.isOverwrite());
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test1() throws Throwable {
        MvArguments mvArguments0 = new MvArguments();
        String[] stringArray0 = new String[8];
        stringArray0[0] = "";
        stringArray0[1] = "-n{";
        try {
            mvArguments0.parse(stringArray0);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // mv: Invalid flag option supplied
            //
            verifyException("sg.edu.nus.comp.cs4218.impl.app.args.MvArguments", e);
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test2() throws Throwable {
        MvArguments mvArguments0 = new MvArguments();
        String[] stringArray0 = new String[2];
        stringArray0[0] = "]T";
        stringArray0[1] = "]T";
        mvArguments0.parse(stringArray0);
        assertTrue(mvArguments0.isOverwrite());
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test3() throws Throwable {
        MvArguments mvArguments0 = new MvArguments();
        String[] stringArray0 = new String[0];
        mvArguments0.parse(stringArray0);
        assertTrue(mvArguments0.isOverwrite());
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test4() throws Throwable {
        MvArguments mvArguments0 = new MvArguments();
        mvArguments0.parse((String[]) null);
        assertTrue(mvArguments0.isOverwrite());
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test5() throws Throwable {
        MvArguments mvArguments0 = new MvArguments();
        boolean boolean0 = mvArguments0.isOverwrite();
        assertTrue(boolean0);
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test6() throws Throwable {
        MvArguments mvArguments0 = new MvArguments();
        mvArguments0.getFiles();
        assertTrue(mvArguments0.isOverwrite());
    }
}
