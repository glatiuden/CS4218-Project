/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 17 18:58:14 GMT 2022
 */

package sg.edu.nus.comp.cs4218.impl.app;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;

import static org.evosuite.runtime.EvoAssertions.*;

import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;

import org.evosuite.runtime.EvoRunnerJUnit5;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.jupiter.api.extension.RegisterExtension;
import sg.edu.nus.comp.cs4218.impl.app.SortApplication;
import sg.edu.nus.comp.cs4218.impl.parser.SortArgsParser;

@SuppressWarnings("PMD") // Not required to check for generated tests
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class SortApplication_ESTest extends SortApplication_ESTest_scaffolding {
    @RegisterExtension
    static EvoRunnerJUnit5 runner = new EvoRunnerJUnit5(SortApplication_ESTest.class);

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test00() throws Throwable {
        Boolean boolean0 = Boolean.TRUE;
        String[] stringArray0 = new String[0];
        SortApplication sortApplication0 = new SortApplication();
        byte[] byteArray0 = new byte[3];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        Boolean boolean1 = Boolean.valueOf(false);
        String string0 = sortApplication0.sortFromStdinAndFiles(boolean0, boolean1, boolean0, byteArrayInputStream0, stringArray0);
        assertEquals("\u0000\u0000\u0000", string0);
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test01() throws Throwable {
        SortApplication sortApplication0 = new SortApplication();
        Boolean boolean0 = Boolean.valueOf("");
        Boolean boolean1 = Boolean.valueOf(true);
        byte[] byteArray0 = new byte[0];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 45, 9);
        String string0 = sortApplication0.sortFromStdin(boolean1, boolean0, boolean1, byteArrayInputStream0);
        assertEquals("", string0);
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test02() throws Throwable {
        SortApplication sortApplication0 = new SortApplication();
        Boolean boolean0 = Boolean.FALSE;
        String[] stringArray0 = new String[0];
        Boolean boolean1 = Boolean.TRUE;
        String string0 = sortApplication0.sortFromFiles(boolean0, boolean0, boolean1, stringArray0);
        assertEquals("", string0);
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test03() throws Throwable {
        Boolean boolean0 = Boolean.valueOf("");
        Boolean boolean1 = Boolean.TRUE;
        String[] stringArray0 = new String[0];
        SortApplication sortApplication0 = new SortApplication();
        String string0 = sortApplication0.sortFromFiles(boolean1, boolean0, boolean0, stringArray0);
        assertEquals("", string0);
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test04() throws Throwable {
        SortApplication sortApplication0 = new SortApplication();
        String[] stringArray0 = new String[4];
        byte[] byteArray0 = new byte[0];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        Boolean boolean0 = Boolean.FALSE;
        try {
            sortApplication0.sortFromStdinAndFiles(boolean0, boolean0, boolean0, byteArrayInputStream0, stringArray0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test05() throws Throwable {
        SortApplication sortApplication0 = new SortApplication();
        Boolean boolean0 = Boolean.valueOf("");
        String[] stringArray0 = new String[0];
        byte[] byteArray0 = new byte[8];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2803), 1744);
        try {
            sortApplication0.sortFromStdinAndFiles((Boolean) null, boolean0, boolean0, byteArrayInputStream0, stringArray0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // arraycopy: source index -2803 out of bounds for byte[8]
            //
            verifyException("java.io.ByteArrayInputStream", e);
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test06() throws Throwable {
        SortApplication sortApplication0 = new SortApplication();
        Boolean boolean0 = Boolean.TRUE;
        String[] stringArray0 = new String[0];
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        try {
            sortApplication0.sortFromStdinAndFiles(boolean0, boolean0, boolean0, pipedInputStream0, stringArray0);
            fail("Expecting exception: IOException");

        } catch (IOException e) {
            //
            // Pipe not connected
            //
            verifyException("java.io.PipedInputStream", e);
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test07() throws Throwable {
        SortApplication sortApplication0 = new SortApplication();
        Boolean boolean0 = Boolean.TRUE;
        byte[] byteArray0 = new byte[0];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1146), (-1146));
        try {
            sortApplication0.sortFromStdin(boolean0, (Boolean) null, (Boolean) null, byteArrayInputStream0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sg.edu.nus.comp.cs4218.impl.app.SortApplication", e);
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test08() throws Throwable {
        SortApplication sortApplication0 = new SortApplication();
        Boolean boolean0 = Boolean.valueOf("");
        byte[] byteArray0 = new byte[8];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-51), (byte) 127);
        try {
            sortApplication0.sortFromStdin(boolean0, boolean0, (Boolean) null, byteArrayInputStream0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // arraycopy: source index -51 out of bounds for byte[8]
            //
            verifyException("java.io.ByteArrayInputStream", e);
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test09() throws Throwable {
        SortApplication sortApplication0 = new SortApplication();
        Boolean boolean0 = Boolean.TRUE;
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
        try {
            sortApplication0.sortFromStdin(boolean0, boolean0, boolean0, bufferedInputStream0);
            fail("Expecting exception: IOException");

        } catch (IOException e) {
            //
            // Stream closed
            //
            verifyException("java.io.BufferedInputStream", e);
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test10() throws Throwable {
        SortApplication sortApplication0 = new SortApplication();
        String[] stringArray0 = new String[0];
        try {
            sortApplication0.sortFromFiles((Boolean) null, (Boolean) null, (Boolean) null, stringArray0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sg.edu.nus.comp.cs4218.impl.app.SortApplication", e);
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test11() throws Throwable {
        SortApplication sortApplication0 = new SortApplication();
        String[] stringArray0 = new String[0];
        byte[] byteArray0 = new byte[5];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
        // Undeclared exception!
        try {
            sortApplication0.run(stringArray0, byteArrayInputStream0, dataOutputStream0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.io.DataOutputStream", e);
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test12() throws Throwable {
        Boolean boolean0 = Boolean.TRUE;
        String[] stringArray0 = new String[0];
        MockPrintStream mockPrintStream0 = new MockPrintStream("ul argumnts");
        SortApplication sortApplication0 = new SortApplication();
        byte[] byteArray0 = new byte[3];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        sortApplication0.run(stringArray0, byteArrayInputStream0, mockPrintStream0);
        assertEquals(0, byteArrayInputStream0.available());

        String string0 = sortApplication0.sortFromStdinAndFiles(boolean0, boolean0, boolean0, byteArrayInputStream0, stringArray0);
        assertEquals("", string0);
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test13() throws Throwable {
        SortApplication sortApplication0 = new SortApplication();
        Boolean boolean0 = Boolean.valueOf(false);
        FileDescriptor fileDescriptor0 = new FileDescriptor();
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
        try {
            sortApplication0.sortFromStdinAndFiles(boolean0, boolean0, (Boolean) null, pushbackInputStream0, (String[]) null);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // Null arguments
            //
            verifyException("sg.edu.nus.comp.cs4218.impl.app.SortApplication", e);
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test14() throws Throwable {
        SortApplication sortApplication0 = new SortApplication();
        Boolean boolean0 = Boolean.TRUE;
        String[] stringArray0 = new String[7];
        try {
            sortApplication0.sortFromStdinAndFiles(boolean0, boolean0, boolean0, (InputStream) null, stringArray0);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // Null Pointer Exception
            //
            verifyException("sg.edu.nus.comp.cs4218.impl.app.SortApplication", e);
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test15() throws Throwable {
        SortApplication sortApplication0 = new SortApplication();
        String[] stringArray0 = new String[0];
        MockPrintStream mockPrintStream0 = new MockPrintStream("Null arguments");
        byte[] byteArray0 = new byte[0];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 45, 9);
        sortApplication0.run(stringArray0, byteArrayInputStream0, mockPrintStream0);
        assertEquals((-45), byteArrayInputStream0.available());
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test16() throws Throwable {
        SortApplication sortApplication0 = new SortApplication();
        Boolean boolean0 = Boolean.valueOf("");
        try {
            sortApplication0.sortFromStdin(boolean0, boolean0, boolean0, (InputStream) null);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // Null Pointer Exception
            //
            verifyException("sg.edu.nus.comp.cs4218.impl.app.SortApplication", e);
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test17() throws Throwable {
        SortApplication sortApplication0 = new SortApplication();
        InputStream inputStream0 = InputStream.nullInputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream("-");
        String[] stringArray0 = new String[3];
        stringArray0[0] = "sg.edu.nus.comp.cs4218.impl.app.SortApplication";
        stringArray0[1] = "sg.edu.nus.comp.cs4218.impl.app.SortApplication";
        stringArray0[2] = "-";
        try {
            sortApplication0.run(stringArray0, inputStream0, mockPrintStream0);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // sort: sg.edu.nus.comp.cs4218.impl.app.SortApplication: No such file or directory
            //
            verifyException("sg.edu.nus.comp.cs4218.impl.app.SortApplication", e);
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test18() throws Throwable {
        SortApplication sortApplication0 = new SortApplication();
        String[] stringArray0 = new String[4];
        stringArray0[0] = "";
        stringArray0[1] = "";
        stringArray0[2] = "";
        stringArray0[3] = "#Bue>cuDh";
        InputStream inputStream0 = InputStream.nullInputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream("u1(K");
        try {
            sortApplication0.run(stringArray0, inputStream0, mockPrintStream0);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // sort: : This is a directory
            //
            verifyException("sg.edu.nus.comp.cs4218.impl.app.SortApplication", e);
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test19() throws Throwable {
        Boolean boolean0 = Boolean.valueOf("");
        String[] stringArray0 = new String[0];
        byte[] byteArray0 = new byte[9];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        SortApplication sortApplication0 = new SortApplication();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte) 86);
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        sortApplication0.run(stringArray0, byteArrayInputStream0, filterOutputStream0);
        String string0 = sortApplication0.sortFromFiles(boolean0, boolean0, boolean0, stringArray0);
        assertEquals("", string0);
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test20() throws Throwable {
        SortApplication sortApplication0 = new SortApplication();
        Boolean boolean0 = Boolean.valueOf(".");
        try {
            sortApplication0.sortFromFiles(boolean0, boolean0, (Boolean) null, (String[]) null);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // Null arguments
            //
            verifyException("sg.edu.nus.comp.cs4218.impl.app.SortApplication", e);
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test21() throws Throwable {
        Boolean boolean0 = Boolean.FALSE;
        SortApplication sortApplication0 = new SortApplication();
        byte[] byteArray0 = new byte[3];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        String[] stringArray0 = new String[0];
        sortApplication0.sortFromStdinAndFiles((Boolean) null, boolean0, boolean0, byteArrayInputStream0, stringArray0);
        File file0 = MockFile.createTempFile("Problem sort from stdin: ", "Problem sort from stdin: ");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
        DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
        try {
            sortApplication0.run(stringArray0, byteArrayInputStream0, dataOutputStream0);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // sort: Could not write to output stream
            //
            verifyException("sg.edu.nus.comp.cs4218.impl.app.SortApplication", e);
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test22() throws Throwable {
        InputStream inputStream0 = InputStream.nullInputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream("-");
        SortApplication sortApplication0 = new SortApplication();
        String[] stringArray0 = new String[1];
        stringArray0[0] = "-";
        sortApplication0.run(stringArray0, inputStream0, mockPrintStream0);
        assertEquals(1, stringArray0.length);
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test23() throws Throwable {
        InputStream inputStream0 = InputStream.nullInputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream("<VR71yc@I-");
        SortApplication sortApplication0 = new SortApplication();
        String[] stringArray0 = new String[1];
        stringArray0[0] = "<VR71yc@I-";
        try {
            sortApplication0.run(stringArray0, inputStream0, mockPrintStream0);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // sort: <VR71yc@I-: Such a path is invalid
            //
            verifyException("sg.edu.nus.comp.cs4218.impl.app.SortApplication", e);
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test24() throws Throwable {
        SortApplication sortApplication0 = new SortApplication();
        InputStream inputStream0 = InputStream.nullInputStream();
        try {
            sortApplication0.run((String[]) null, inputStream0, (OutputStream) null);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // sort: Null Pointer Exception
            //
            verifyException("sg.edu.nus.comp.cs4218.impl.app.SortApplication", e);
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test25() throws Throwable {
        SortApplication sortApplication0 = new SortApplication();
        SortArgsParser sortArgsParser0 = new SortArgsParser();
        sortApplication0.setSortParser(sortArgsParser0);
        assertEquals('n', SortArgsParser.CHAR_FIRST_W_NUM);
    }
}
