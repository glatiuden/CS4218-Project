/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 16 06:41:36 GMT 2022
 */

package sg.edu.nus.comp.cs4218.impl.app;

import org.evosuite.runtime.EvoRunnerJUnit5;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.extension.RegisterExtension;
import sg.edu.nus.comp.cs4218.Environment;
import sg.edu.nus.comp.cs4218.exception.PasteException;
import sg.edu.nus.comp.cs4218.impl.parser.PasteArgsParser;

import java.io.*;
import java.nio.file.InvalidPathException;
import java.util.Enumeration;
import java.util.concurrent.TimeUnit;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.evosuite.shaded.org.mockito.Mockito.doReturn;
import static org.evosuite.shaded.org.mockito.Mockito.mock;
import static org.junit.jupiter.api.Assertions.*;
import static sg.edu.nus.comp.cs4218.testutils.TestStringUtils.STRING_NEWLINE;

// Since these test cases are generated by an algorithm, code readability is not the priority
@SuppressWarnings("PMD")
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true,
        separateClassLoader = false)
public class PasteApplication_ESTest extends PasteApplication_ESTest_scaffolding {
    @RegisterExtension
    static EvoRunnerJUnit5 runner = new EvoRunnerJUnit5(PasteApplication_ESTest.class);

    @AfterAll
    public static void reset() {
        Environment.resetCurrentDirectory();
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test00() throws Throwable {
        PasteApplication pasteApplication0 = new PasteApplication();
        PasteApplication pasteApplication1 = new PasteApplication();
        PasteArgsParser pasteArgsParser0 = pasteApplication1.parser;
        pasteApplication0.setArgsParser(pasteArgsParser0);
        assertFalse(pasteApplication0.equals((Object) pasteApplication1));
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test01() throws Throwable {
        PasteApplication pasteApplication0 = new PasteApplication();
        Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        String[] stringArray0 = new String[2];
        stringArray0[0] = "-";
        stringArray0[1] = "]3=(KptD#~E,0Vv)";
        try {
            pasteApplication0.mergeFileAndStdin((Boolean) null, sequenceInputStream0, stringArray0);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // paste: No such file or directory
            //
            verifyException("sg.edu.nus.comp.cs4218.impl.app.PasteApplication", e);
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test02() throws Throwable {
        PasteApplication pasteApplication0 = new PasteApplication();
        Boolean boolean0 = Boolean.valueOf(false);
        // Undeclared exception!
        try {
            pasteApplication0.mergeStdin(boolean0, (InputStream) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.io.Reader", e);
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test03() throws Throwable {
        PasteApplication pasteApplication0 = new PasteApplication();
        Boolean boolean0 = Boolean.FALSE;
        byte[] byteArray0 = new byte[2];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-88), 45);
        // Undeclared exception!
        try {
            pasteApplication0.mergeStdin(boolean0, byteArrayInputStream0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // arraycopy: source index -88 out of bounds for byte[2]
            //
            verifyException("java.io.ByteArrayInputStream", e);
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test04() throws Throwable {
        PasteApplication pasteApplication0 = new PasteApplication();
        byte[] byteArray0 = new byte[1];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 7, 3);
        Boolean boolean0 = Boolean.TRUE;
        String[] stringArray0 = new String[4];
        stringArray0[0] = "e*EPDADR}Nj=";
        // Undeclared exception!
        try {
            pasteApplication0.mergeFileAndStdin(boolean0, byteArrayInputStream0, stringArray0);
            fail("Expecting exception: InvalidPathException");

        } catch (InvalidPathException e) {
        } catch (PasteException e) {
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test05() throws Throwable {
        PasteApplication pasteApplication0 = new PasteApplication();
        byte[] byteArray0 = new byte[3];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2923), 3);
        Boolean boolean0 = Boolean.TRUE;
        String[] stringArray0 = new String[8];
        stringArray0[0] = "-";
        stringArray0[1] = "-";
        stringArray0[2] = "-";
        stringArray0[3] = "-";
        stringArray0[4] = "-";
        stringArray0[5] = "-";
        stringArray0[6] = "-";
        stringArray0[7] = "-";
        // Undeclared exception!
        try {
            pasteApplication0.mergeFileAndStdin(boolean0, byteArrayInputStream0, stringArray0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // arraycopy: source index -2923 out of bounds for byte[3]
            //
            verifyException("java.io.ByteArrayInputStream", e);
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test06() throws Throwable {
        PasteApplication pasteApplication0 = new PasteApplication();
        Boolean boolean0 = Boolean.TRUE;
        FileDescriptor fileDescriptor0 = new FileDescriptor();
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
        String[] stringArray0 = new String[4];
        stringArray0[0] = "-";
        stringArray0[1] = "-";
        stringArray0[2] = "-";
        stringArray0[3] = "-";
        // Undeclared exception!
        try {
            pasteApplication0.mergeFileAndStdin(boolean0, mockFileInputStream0, stringArray0);
            fail("Expecting exception: UncheckedIOException");

        } catch (UncheckedIOException e) {
            //
            // org.evosuite.runtime.mock.java.lang.MockThrowable
            //
            verifyException("java.io.BufferedReader$1", e);
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test07() throws Throwable {
        PasteApplication pasteApplication0 = new PasteApplication();
        Boolean boolean0 = Boolean.TRUE;
        String[] stringArray0 = new String[2];
        stringArray0[0] = "-";
        try {
            pasteApplication0.mergeFile(boolean0, stringArray0);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // paste: No such file or directory
            //
            verifyException("sg.edu.nus.comp.cs4218.impl.app.PasteApplication", e);
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test08() throws Throwable {
        PasteApplication pasteApplication0 = new PasteApplication();
        Boolean boolean0 = Boolean.valueOf(false);
        String[] stringArray0 = new String[1];
        stringArray0[0] = "T P[\" AM";
        // Undeclared exception!
        try {
            pasteApplication0.mergeFile(boolean0, stringArray0);
            fail("Expecting exception: InvalidPathException");
        } catch (PasteException ignored) {
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test09() throws Throwable {
        PasteApplication pasteApplication0 = new PasteApplication();
        OutputStream outputStream0 = OutputStream.nullOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(outputStream0, false);
        String[] stringArray0 = new String[3];
        stringArray0[0] = "]3=(KptD#~E,0Vv)";
        stringArray0[1] = "]3=(KptD#~E,0Vv)";
        stringArray0[2] = "-";
        try {
            pasteApplication0.run(stringArray0, (InputStream) null, mockPrintStream0);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // paste: paste: Null arguments
            //
            verifyException("sg.edu.nus.comp.cs4218.impl.app.PasteApplication", e);
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test10() throws Throwable {
        PasteApplication pasteApplication0 = new PasteApplication();
        byte[] byteArray0 = new byte[0];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 7, 3);
        String[] stringArray0 = new String[1];
        stringArray0[0] = "-";
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
        try {
            pasteApplication0.run(stringArray0, byteArrayInputStream0, mockFileOutputStream0);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // paste: Error in writing to file
            //
            verifyException("sg.edu.nus.comp.cs4218.impl.app.PasteApplication", e);
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test11() throws Throwable {
        PasteApplication pasteApplication0 = new PasteApplication();
        byte[] byteArray0 = new byte[0];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 846, 7);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", true);
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
        try {
            pasteApplication0.run((String[]) null, byteArrayInputStream0, mockPrintStream0);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // paste: Null arguments
            //
            verifyException("sg.edu.nus.comp.cs4218.impl.app.PasteApplication", e);
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test12() throws Throwable {
        PasteApplication pasteApplication0 = new PasteApplication();
        Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        String[] stringArray0 = new String[2];
        // Undeclared exception!
        try {
            pasteApplication0.mergeFileAndStdin((Boolean) null, sequenceInputStream0, stringArray0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test13() throws Throwable {
        PasteApplication pasteApplication0 = new PasteApplication();
        byte[] byteArray0 = new byte[1];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3, 7);
        Boolean boolean0 = Boolean.TRUE;
        String[] stringArray0 = new String[3];
        stringArray0[0] = "-";
        stringArray0[1] = "-";
        stringArray0[2] = "-";
        String string0 = pasteApplication0.mergeFileAndStdin(boolean0, byteArrayInputStream0, stringArray0);
        assertEquals(STRING_NEWLINE + STRING_NEWLINE, string0);
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test16() throws Throwable {
        PasteApplication pasteApplication0 = new PasteApplication();
        Boolean boolean0 = Boolean.TRUE;
        String[] stringArray0 = new String[2];
        // Undeclared exception!
        try {
            pasteApplication0.mergeFile(boolean0, stringArray0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test17() throws Throwable {
        PasteApplication pasteApplication0 = new PasteApplication();
        String[] stringArray0 = new String[0];
        Boolean boolean0 = Boolean.valueOf(true);
        String string0 = pasteApplication0.mergeFile(boolean0, stringArray0);
        assertEquals("", string0);
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test18() throws Throwable {
        PasteApplication pasteApplication0 = new PasteApplication();
        Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        Boolean boolean0 = Boolean.valueOf(true);
        String string0 = pasteApplication0.mergeStdin(boolean0, sequenceInputStream0);
        assertEquals("", string0);
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test19() throws Throwable {
        PasteApplication pasteApplication0 = new PasteApplication();
        Boolean boolean0 = Boolean.valueOf("");
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        // Undeclared exception!
        try {
            pasteApplication0.mergeStdin(boolean0, pipedInputStream0);
            fail("Expecting exception: UncheckedIOException");

        } catch (UncheckedIOException e) {
            //
            // java.io.IOException: Pipe not connected
            //
            verifyException("java.io.BufferedReader$1", e);
        }
    }
}
