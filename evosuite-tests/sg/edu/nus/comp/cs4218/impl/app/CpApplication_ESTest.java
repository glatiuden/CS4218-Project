/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 16 05:20:50 GMT 2022
 */

package sg.edu.nus.comp.cs4218.impl.app;

import org.evosuite.runtime.EvoRunnerJUnit5;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.extension.RegisterExtension;
import sg.edu.nus.comp.cs4218.exception.CpException;
import sg.edu.nus.comp.cs4218.impl.parser.CpArgsParser;

import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.nio.file.InvalidPathException;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;

// Since these test cases are generated by an algorithm, code readability is not the priority
@SuppressWarnings("PMD")
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true,
        separateClassLoader = false)
public class CpApplication_ESTest extends CpApplication_ESTest_scaffolding {
    @RegisterExtension
    static EvoRunnerJUnit5 runner = new EvoRunnerJUnit5(CpApplication_ESTest.class);

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test00() throws Throwable {
        CpApplication cpApplication0 = new CpApplication();
        CpArgsParser cpArgsParser0 = new CpArgsParser();
        cpApplication0.setArgsParser(cpArgsParser0);
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test01() throws Throwable {
        CpApplication cpApplication0 = new CpApplication();
        String[] stringArray0 = new String[3];
        try {
            cpApplication0.run(stringArray0, (InputStream) null, (OutputStream) null);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // cp: null
            //
            verifyException("sg.edu.nus.comp.cs4218.impl.app.CpApplication", e);
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test02() throws Throwable {
        CpApplication cpApplication0 = new CpApplication();
        String[] stringArray0 = new String[1];
        stringArray0[0] = "sg.edu.nus.comp.cs4218.impl.parser.CpArgsParser";
        PipedInputStream pipedInputStream0 = new PipedInputStream(2273);
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
        try {
            cpApplication0.run(stringArray0, pipedInputStream0, mockPrintStream0);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // cp: Missing Argument
            //
            verifyException("sg.edu.nus.comp.cs4218.impl.parser.CpArgsParser", e);
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test03() throws Throwable {
        CpApplication cpApplication0 = new CpApplication();
        Boolean boolean0 = Boolean.FALSE;
        try {
            cpApplication0.cpSrcFileToDestFile(boolean0, "Z.RvkBb5m", "Z.RvkBb5m");
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // cp: null
            //
            verifyException("sg.edu.nus.comp.cs4218.impl.app.CpApplication", e);
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test04() throws Throwable {
        CpApplication cpApplication0 = new CpApplication();
        Boolean boolean0 = Boolean.TRUE;
        // Undeclared exception!
        try {
            cpApplication0.cpSrcFileToDestFile(boolean0, "cp:cp: =dR`.^z!`G: No such direatory", "\u0007E%kh;]RS;tH2/");
            fail("Expecting exception: InvalidPathException");

        } catch (InvalidPathException | CpException | NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test05() throws Throwable {
        CpApplication cpApplication0 = new CpApplication();
        // Undeclared exception!
        try {
            cpApplication0.cpSrcFileToDestFile((Boolean) null, (String) null, (String) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test06() throws Throwable {
        CpApplication cpApplication0 = new CpApplication();
        Boolean boolean0 = cpApplication0.parser.isRecursive();
        String[] stringArray0 = new String[0];
        // Undeclared exception!
        try {
            cpApplication0.cpFilesToFolder(boolean0, "D7|nilYQK", stringArray0);
            fail("Expecting exception: InvalidPathException");

        } catch (InvalidPathException e) {
        } catch (CpException e) {
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test07() throws Throwable {
        CpApplication cpApplication0 = new CpApplication();
        String[] stringArray0 = new String[2];
        Boolean boolean0 = Boolean.FALSE;
        // Undeclared exception!
        try {
            cpApplication0.cpFilesToFolder(boolean0, "", stringArray0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test09() throws Throwable {
        CpApplication cpApplication0 = new CpApplication();
        try {
            cpApplication0.run((String[]) null, (InputStream) null, (OutputStream) null);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // cp: Null arguments
            //
            verifyException("sg.edu.nus.comp.cs4218.impl.app.CpApplication", e);
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test10() throws Throwable {
        CpApplication cpApplication0 = new CpApplication();
        Boolean boolean0 = Boolean.TRUE;
        String[] stringArray0 = new String[1];
        stringArray0[0] = "";
        try {
            cpApplication0.cpFilesToFolder(boolean0, "", stringArray0);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // cp: Cannot copy a file or directory into itself
            //
            verifyException("sg.edu.nus.comp.cs4218.impl.app.CpApplication", e);
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test11() throws Throwable {
        CpApplication cpApplication0 = new CpApplication();
        Boolean boolean0 = Boolean.valueOf("Permission denied");
        String[] stringArray0 = new String[8];
        stringArray0[0] = "Permission denied";
        stringArray0[1] = "Permission denied";
        stringArray0[2] = "Permission denied";
        stringArray0[3] = "";
        stringArray0[4] = "";
        stringArray0[5] = "Permission denied";
        stringArray0[6] = "Permission denied";
        stringArray0[7] = "";
        String string0 = cpApplication0.cpFilesToFolder(boolean0, "", stringArray0);
        assertEquals("", string0);
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test12() throws Throwable {
        CpApplication cpApplication0 = new CpApplication();
        Boolean boolean0 = cpApplication0.parser.isRecursive();
        String[] stringArray0 = new String[0];
        try {
            cpApplication0.cpFilesToFolder(boolean0, "user.dir", stringArray0);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // cp: user.dir: No such directory
            //
            verifyException("sg.edu.nus.comp.cs4218.impl.app.CpApplication", e);
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test13() throws Throwable {
        CpApplication cpApplication0 = new CpApplication();
        Boolean boolean0 = Boolean.TRUE;
        String[] stringArray0 = new String[5];
        stringArray0[0] = "";
        try {
            cpApplication0.cpFilesToFolder(boolean0, "/.", stringArray0);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // cp: Permission denied
            //
            verifyException("sg.edu.nus.comp.cs4218.impl.app.CpApplication", e);
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test15() throws Throwable {
        CpApplication cpApplication0 = new CpApplication();
        EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Insufficient arguments");
        FileSystemHandling.appendLineToFile(evoSuiteFile0, "sg.edu.nus.comp.cs4218.impl.parser.ArgsParser");
        Boolean boolean0 = Boolean.valueOf(true);
        String string0 = "";
        try {
            string0 = cpApplication0.cpSrcFileToDestFile(boolean0, "Insufficient arguments", "sg.edu.nus.comp" +
                    ".cs4218.impl.parser.ArgsParser");
        } catch (CpException e) {
            assertEquals("", string0);
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test16() throws Throwable {
        CpApplication cpApplication0 = new CpApplication();
        String[] stringArray0 = new String[2];
        stringArray0[0] = "sg.edu.nus.comp.cs4218.impl.parser.ArgsParser";
        stringArray0[1] = "sg.edu.nus.comp.cs4218.impl.parser.ArgsParser";
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("sg.edu.nus.comp.cs4218.impl.parser.ArgsParser");
        try {
            cpApplication0.run(stringArray0, pipedInputStream0, mockFileOutputStream0);
        } catch (CpException e) {
            assertEquals(0, pipedInputStream0.available());
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test17() throws Throwable {
        Future<?> future = executor.submit(new Runnable() {
            @Override
            public void run() {
                try {
                    CpApplication cpApplication0 = new CpApplication();
                    Boolean boolean0 = Boolean.TRUE;
                    String[] stringArray0 = new String[1];
                    stringArray0[0] = "";
                    // Undeclared exception!
                    try {
                        cpApplication0.cpFilesToFolder(boolean0, "/", stringArray0);
                        fail("Expecting exception: SecurityException");

                    } catch (SecurityException e) {
                        //
                        // Security manager blocks (\"java.io.FilePermission\" \"\\\" \"write\")
                        // java.base/java.lang.Thread.getStackTrace(Thread.java:1606)
                        // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
                        // java.base/java.lang.SecurityManager.checkWrite(SecurityManager.java:752)
                        // java.base/sun.nio.fs.WindowsPath.checkWrite(WindowsPath.java:854)
                        // java.base/sun.nio.fs.WindowsFileSystemProvider.createDirectory(WindowsFileSystemProvider.java:496)
                        // java.base/java.nio.file.Files.createDirectory(Files.java:689)
                        // java.base/java.nio.file.Files.createAndCheckIsDirectory(Files.java:796)
                        // java.base/java.nio.file.Files.createDirectories(Files.java:742)
                        // sg.edu.nus.comp.cs4218.impl.app.CpApplication$1.preVisitDirectory(CpApplication.java:99)
                        // sg.edu.nus.comp.cs4218.impl.app.CpApplication$1.preVisitDirectory(CpApplication.java:96)
                        // java.base/java.nio.file.Files.walkFileTree(Files.java:2731)
                        // java.base/java.nio.file.Files.walkFileTree(Files.java:2796)
                        // sg.edu.nus.comp.cs4218.impl.app.CpApplication.cpFolderToFolder(CpApplication.java:96)
                        // sg.edu.nus.comp.cs4218.impl.app.CpApplication.cpFilesToFolder(CpApplication.java:155)
                        // jdk.internal.reflect.GeneratedMethodAccessor53.invoke(Unknown Source)
                        // java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
                        // java.base/java.lang.reflect.Method.invoke(Method.java:566)
                        // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
                        // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
                        // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
                        // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
                        // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
                        // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
                        // java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
                        // java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
                        // java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
                        // java.base/java.lang.Thread.run(Thread.java:834)
                        //
                        verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
                    }
                } catch (Throwable t) {
                    // Need to catch declared exceptions
                }
            }
        });
        future.get(4000, TimeUnit.MILLISECONDS);
    }
}
