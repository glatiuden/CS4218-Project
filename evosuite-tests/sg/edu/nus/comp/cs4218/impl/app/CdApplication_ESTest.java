/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 19 08:39:41 GMT 2022
 */

package sg.edu.nus.comp.cs4218.impl.app;

import org.evosuite.runtime.EvoRunnerJUnit5;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.extension.RegisterExtension;
import sg.edu.nus.comp.cs4218.Environment;

import java.io.*;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.junit.jupiter.api.Assertions.fail;

@SuppressWarnings("PMD") // Not required to check for generated tests
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class CdApplication_ESTest extends CdApplication_ESTest_scaffolding {
    @RegisterExtension
    static EvoRunnerJUnit5 runner = new EvoRunnerJUnit5(CdApplication_ESTest.class);

    @AfterEach
    public void reset() {
        Environment.resetCurrentDirectory();
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test0() throws Throwable {
        Future<?> future = executor.submit(new Runnable() {
            @Override
            public void run() {
                try {
                    CdApplication cdApplication0 = new CdApplication();
                    // Undeclared exception!
                    try {
                        cdApplication0.changeToDirectory(".");
                        fail("Expecting exception: SecurityException");

                    } catch (SecurityException e) {
                        //
                        // Security manager blocks (\"java.io.FilePermission\" \"/Users/kohvinleon/Documents/cs4218-project-2022-team17/.\" \"execute\")
                        // java.base/java.lang.Thread.getStackTrace(Thread.java:1606)
                        // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
                        // java.base/java.lang.SecurityManager.checkExec(SecurityManager.java:569)
                        // java.base/sun.nio.fs.UnixFileSystemProvider.checkAccess(UnixFileSystemProvider.java:306)
                        // java.base/java.nio.file.Files.isAccessible(Files.java:2510)
                        // java.base/java.nio.file.Files.isExecutable(Files.java:2611)
                        // sg.edu.nus.comp.cs4218.impl.app.CdApplication.getNormalizedAbsolutePath(CdApplication.java:93)
                        // sg.edu.nus.comp.cs4218.impl.app.CdApplication.changeToDirectory(CdApplication.java:30)
                        // jdk.internal.reflect.GeneratedMethodAccessor38.invoke(Unknown Source)
                        // java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
                        // java.base/java.lang.reflect.Method.invoke(Method.java:566)
                        // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
                        // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
                        // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
                        // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
                        // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
                        // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
                        // java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
                        // java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
                        // java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
                        // java.base/java.lang.Thread.run(Thread.java:834)
                        //
                        verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
                    }
                } catch (Throwable t) {
                    // Need to catch declared exceptions
                }
            }
        });
        future.get(4000, TimeUnit.MILLISECONDS);
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test1() throws Throwable {
        CdApplication cdApplication0 = new CdApplication();
        try {
            cdApplication0.changeToDirectory("%s: %s");
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // cd: %s: %s: No such file or directory
            //
            verifyException("sg.edu.nus.comp.cs4218.impl.app.CdApplication", e);
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test2() throws Throwable {
        CdApplication cdApplication0 = new CdApplication();
        String[] stringArray0 = new String[6];
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte) 27);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Too many arguments");
        try {
            cdApplication0.run(stringArray0, byteArrayInputStream0, mockFileOutputStream0);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // cd: Too many arguments
            //
            verifyException("sg.edu.nus.comp.cs4218.impl.app.CdApplication", e);
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test3() throws Throwable {
        CdApplication cdApplication0 = new CdApplication();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
        String[] stringArray0 = new String[0];
        try {
            cdApplication0.run(stringArray0, pipedInputStream0, pipedOutputStream0);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // cd: Missing Argument
            //
            verifyException("sg.edu.nus.comp.cs4218.impl.app.CdApplication", e);
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test4() throws Throwable {
        CdApplication cdApplication0 = new CdApplication();
        String[] stringArray0 = new String[2];
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
        try {
            cdApplication0.run(stringArray0, pipedInputStream0, (OutputStream) null);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // cd: Could not write to output stream
            //
            verifyException("sg.edu.nus.comp.cs4218.impl.app.CdApplication", e);
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test5() throws Throwable {
        CdApplication cdApplication0 = new CdApplication();
        String[] stringArray0 = new String[0];
        MockPrintStream mockPrintStream0 = new MockPrintStream("I");
        try {
            cdApplication0.run(stringArray0, (InputStream) null, mockPrintStream0);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // cd: InputStream not provided
            //
            verifyException("sg.edu.nus.comp.cs4218.impl.app.CdApplication", e);
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test6() throws Throwable {
        CdApplication cdApplication0 = new CdApplication();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
        try {
            cdApplication0.run((String[]) null, pipedInputStream0, pipedOutputStream0);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // cd: Null arguments
            //
            verifyException("sg.edu.nus.comp.cs4218.impl.app.CdApplication", e);
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test7() throws Throwable {
        CdApplication cdApplication0 = new CdApplication();
        String[] stringArray0 = new String[1];
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        try {
            cdApplication0.run(stringArray0, pipedInputStream0, pipedOutputStream0);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // cd: Insufficient arguments
            //
            verifyException("sg.edu.nus.comp.cs4218.impl.app.CdApplication", e);
        }
    }
}
