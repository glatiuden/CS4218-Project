/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 16 05:30:57 GMT 2022
 */

package sg.edu.nus.comp.cs4218.impl.app;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;

import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;

import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

import org.evosuite.runtime.EvoRunnerJUnit5;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.jupiter.api.extension.RegisterExtension;
import sg.edu.nus.comp.cs4218.impl.app.TeeApplication;
import sg.edu.nus.comp.cs4218.impl.parser.TeeArgsParser;

// Since these test cases are generated by an algorithm, code readability is not the priority
@SuppressWarnings("PMD")
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true,
        separateClassLoader = false)
public class TeeApplication_ESTest extends TeeApplication_ESTest_scaffolding {
    @RegisterExtension
    static EvoRunnerJUnit5 runner = new EvoRunnerJUnit5(TeeApplication_ESTest.class);

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test0() throws Throwable {
        TeeApplication teeApplication0 = new TeeApplication();
        Boolean boolean0 = Boolean.TRUE;
        InputStream inputStream0 = InputStream.nullInputStream();
        // Undeclared exception!
        try {
            teeApplication0.teeFromStdin(boolean0, inputStream0, (String[]) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sg.edu.nus.comp.cs4218.impl.app.TeeApplication", e);
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test1() throws Throwable {
        TeeApplication teeApplication0 = new TeeApplication();
        Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        try {
            teeApplication0.run((String[]) null, sequenceInputStream0, (OutputStream) null);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // tee: Null arguments
            //
            verifyException("sg.edu.nus.comp.cs4218.impl.app.TeeApplication", e);
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test2() throws Throwable {
        String[] stringArray0 = new String[0];
        TeeApplication teeApplication0 = new TeeApplication();
        byte[] byteArray0 = new byte[9];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        teeApplication0.run(stringArray0, byteArrayInputStream0, pipedOutputStream0);
        TeeArgsParser teeArgsParser0 = new TeeArgsParser();
        Boolean boolean0 = teeArgsParser0.isAppending();
        FileDescriptor fileDescriptor0 = new FileDescriptor();
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
        try {
            teeApplication0.teeFromStdin(boolean0, mockFileInputStream0, stringArray0);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // tee: Stream closed
            //
            verifyException("sg.edu.nus.comp.cs4218.impl.app.TeeApplication", e);
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test3() throws Throwable {
        TeeApplication teeApplication0 = new TeeApplication();
        try {
            teeApplication0.setupReader((InputStream) null);
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // Null arguments
            //
            verifyException("sg.edu.nus.comp.cs4218.impl.app.TeeApplication", e);
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test4() throws Throwable {
        Future<?> future = executor.submit(new Runnable() {
            @Override
            public void run() {
                try {
                    TeeApplication teeApplication0 = new TeeApplication();
                    byte[] byteArray0 = new byte[4];
                    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
                    String[] stringArray0 = new String[1];
                    stringArray0[0] = ",n;v+p";
                    try {
                        teeApplication0.run(stringArray0, byteArrayInputStream0, (OutputStream) null);
                        fail("Expecting exception: Exception");

                    } catch (Exception e) {
                        //
                        // tee: Security manager blocks (\"java.io.FilePermission\" \"D:\\Git repositories\\cs4218-project-2022-team17\\,n;v+p\" \"write\")
                        // java.base/java.lang.Thread.getStackTrace(Thread.java:1606)
                        // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
                        // java.base/java.lang.SecurityManager.checkWrite(SecurityManager.java:752)
                        // java.base/sun.nio.fs.WindowsChannelFactory.open(WindowsChannelFactory.java:301)
                        // java.base/sun.nio.fs.WindowsChannelFactory.newFileChannel(WindowsChannelFactory.java:168)
                        // java.base/sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:230)
                        // java.base/java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:478)
                        // java.base/java.nio.file.Files.newOutputStream(Files.java:219)
                        // java.base/java.nio.file.Files.write(Files.java:3424)
                        // java.base/java.nio.file.Files.writeString(Files.java:3640)
                        // java.base/java.nio.file.Files.writeString(Files.java:3580)
                        // sg.edu.nus.comp.cs4218.impl.app.TeeApplication.teeFromStdin(TeeApplication.java:90)
                        // sg.edu.nus.comp.cs4218.impl.app.TeeApplication.run(TeeApplication.java:124)
                        // jdk.internal.reflect.GeneratedMethodAccessor40.invoke(Unknown Source)
                        // java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
                        // java.base/java.lang.reflect.Method.invoke(Method.java:566)
                        // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
                        // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
                        // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
                        // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
                        // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
                        // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
                        // java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
                        // java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
                        // java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
                        // java.base/java.lang.Thread.run(Thread.java:834)
                        //
                        verifyException("sg.edu.nus.comp.cs4218.impl.app.TeeApplication", e);
                    }
                } catch (Throwable t) {
                    // Need to catch declared exceptions
                }
            }
        });
        future.get(4000, TimeUnit.MILLISECONDS);
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test5() throws Throwable {
        TeeApplication teeApplication0 = new TeeApplication();
        TeeArgsParser teeArgsParser0 = new TeeArgsParser();
        teeApplication0.setArgsParser(teeArgsParser0);
    }
}
