/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 19 10:18:30 GMT 2022
 */

package sg.edu.nus.comp.cs4218.impl.util;

import org.evosuite.runtime.EvoRunnerJUnit5;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.condition.DisabledOnOs;
import org.junit.jupiter.api.condition.OS;
import org.junit.jupiter.api.extension.RegisterExtension;
import sg.edu.nus.comp.cs4218.Environment;

import java.nio.file.InvalidPathException;
import java.util.List;
import java.util.concurrent.TimeUnit;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.junit.jupiter.api.Assertions.*;

@SuppressWarnings("PMD")
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class RegexArgument_ESTest extends RegexArgument_ESTest_scaffolding {
    @RegisterExtension
    static EvoRunnerJUnit5 runner = new EvoRunnerJUnit5(RegexArgument_ESTest.class);

    @AfterEach
    public void reset() {
        Environment.resetCurrentDirectory();
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test00() throws Throwable {
        RegexArgument regexArgument0 = new RegexArgument("]zLXn8CBXD;? %pEe0", "pO", true);
        assertEquals("pO", regexArgument0.toString());
        assertTrue(regexArgument0.isRegex());
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test01() throws Throwable {
        RegexArgument regexArgument0 = new RegexArgument("[^");
        regexArgument0.toString();
        assertFalse(regexArgument0.isRegex());
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test02() throws Throwable {
        RegexArgument regexArgument0 = new RegexArgument();
        regexArgument0.appendAsterisk();
        boolean boolean0 = regexArgument0.isRegex();
        assertEquals("*", regexArgument0.toString());
        assertTrue(boolean0);
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test03() throws Throwable {
        RegexArgument regexArgument0 = new RegexArgument();
        // Undeclared exception!
        try {
            regexArgument0.merge((RegexArgument) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sg.edu.nus.comp.cs4218.impl.util.RegexArgument", e);
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test04() throws Throwable {
        RegexArgument regexArgument0 = new RegexArgument();
        // Undeclared exception!
        try {
            regexArgument0.merge((String) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test05() throws Throwable {
        RegexArgument regexArgument0 = null;
        try {
            regexArgument0 = new RegexArgument((String) null, (String) null, true);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sg.edu.nus.comp.cs4218.impl.util.RegexArgument", e);
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test06() throws Throwable {
        RegexArgument regexArgument0 = null;
        try {
            regexArgument0 = new RegexArgument((String) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test07() throws Throwable {
        RegexArgument regexArgument0 = new RegexArgument("user.dir");
        regexArgument0.merge("_uhVl?%{M");
        assertFalse(regexArgument0.isRegex());
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test08() throws Throwable {
        RegexArgument regexArgument0 = new RegexArgument("[^", "", false);
        boolean boolean0 = regexArgument0.isEmpty();
        assertFalse(regexArgument0.isRegex());
        assertTrue(boolean0);
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test09() throws Throwable {
        RegexArgument regexArgument0 = new RegexArgument("user.dir");
        boolean boolean0 = regexArgument0.isEmpty();
        assertFalse(boolean0);
        assertFalse(regexArgument0.isRegex());
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test10() throws Throwable {
        RegexArgument regexArgument0 = new RegexArgument();
        regexArgument0.appendAsterisk();
        regexArgument0.globFiles();
        assertEquals("*", regexArgument0.toString());
    }

    @DisabledOnOs(OS.WINDOWS)
    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test11() throws Throwable {
        RegexArgument regexArgument0 = new RegexArgument("user.dir", "user.dir", false);
        regexArgument0.appendAsterisk();
        RegexArgument regexArgument1 = new RegexArgument("/");
        regexArgument1.append('p');
        regexArgument0.merge(regexArgument1);
        // Undeclared exception!
        try {
            regexArgument0.globFiles();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.util.Objects", e);
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test12() throws Throwable {
        RegexArgument regexArgument0 = new RegexArgument();
        List<String> list0 = regexArgument0.globFiles();
        assertFalse(regexArgument0.isRegex());
        assertFalse(list0.isEmpty());
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test13() throws Throwable {
        RegexArgument regexArgument0 = new RegexArgument("user.dir");
        RegexArgument regexArgument1 = new RegexArgument("]*", "]*", true);
        regexArgument0.merge(regexArgument1);
        assertEquals("user.dir]*", regexArgument0.toString());
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test14() throws Throwable {
        RegexArgument regexArgument0 = new RegexArgument("user.dir");
        regexArgument0.merge(regexArgument0);
        assertFalse(regexArgument0.isRegex());
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test15() throws Throwable {
        RegexArgument regexArgument0 = new RegexArgument();
        regexArgument0.toString();
        assertFalse(regexArgument0.isRegex());
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test16() throws Throwable {
        RegexArgument regexArgument0 = new RegexArgument();
        boolean boolean0 = regexArgument0.isRegex();
        assertFalse(boolean0);
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test17() throws Throwable {
        RegexArgument regexArgument0 = new RegexArgument("");
        Environment.currentDirectory = "Q\u0000E";
        regexArgument0.appendAsterisk();
        // Undeclared exception!
        try {
            regexArgument0.globFiles();
            fail("Expecting exception: InvalidPathException");

        } catch (InvalidPathException e) {
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test18() throws Throwable {
        RegexArgument regexArgument0 = new RegexArgument("\\", "\\", true);
        List<String> list0 = regexArgument0.globFiles();
        assertTrue(list0.contains("\\"));
        assertTrue(regexArgument0.isRegex());
    }
}
