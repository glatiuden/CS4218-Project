/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 17 18:49:47 GMT 2022
 */

package sg.edu.nus.comp.cs4218.impl.util;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;

import static org.evosuite.runtime.EvoAssertions.*;

import org.evosuite.runtime.EvoRunnerJUnit5;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.jupiter.api.condition.DisabledOnOs;
import org.junit.jupiter.api.condition.OS;
import org.junit.jupiter.api.extension.RegisterExtension;
import sg.edu.nus.comp.cs4218.impl.util.StringUtils;

@SuppressWarnings("PMD") // Not required to check for generated tests
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {
    @RegisterExtension
    static EvoRunnerJUnit5 runner = new EvoRunnerJUnit5(StringUtils_ESTest.class);

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test00() throws Throwable {
        String string0 = StringUtils.multiplyChar('(', (-978));
        assertEquals("", string0);
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test01() throws Throwable {
        boolean boolean0 = StringUtils.isNumber("");
        assertFalse(boolean0);
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test02() throws Throwable {
        // Undeclared exception!
        try {
            StringUtils.isAll((String) null, (String[]) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sg.edu.nus.comp.cs4218.impl.util.StringUtils", e);
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test03() throws Throwable {
        // Undeclared exception!
        try {
            StringUtils.getChunk("");
            fail("Expecting exception: StringIndexOutOfBoundsException");

        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test04() throws Throwable {
        // Undeclared exception!
        try {
            StringUtils.getChunk((String) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("sg.edu.nus.comp.cs4218.impl.util.StringUtils", e);
        }
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test05() throws Throwable {
        String string0 = StringUtils.getChunk("sg.edu.nus.comp.cs4218.impl.util.StringUtils");
        assertEquals("sg.edu.nus.comp.cs", string0);
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test06() throws Throwable {
        String string0 = StringUtils.getChunk("75=JW~r");
        assertEquals("75", string0);
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test07() throws Throwable {
        String string0 = StringUtils.getChunk("OqY");
        assertEquals("OqY", string0);
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test08() throws Throwable {
        boolean boolean0 = StringUtils.isNumber("1");
        assertTrue(boolean0);
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test09() throws Throwable {
        String string0 = StringUtils.multiplyChar('D', 0);
        assertEquals("", string0);
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test10() throws Throwable {
        String string0 = StringUtils.multiplyChar('*', 1952);
        assertNotNull(string0);
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test11() throws Throwable {
        String[] stringArray0 = StringUtils.tokenize("Q-*W%S");
        boolean boolean0 = StringUtils.isAll("Q-*W%S", stringArray0);
        assertTrue(boolean0);
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test12() throws Throwable {
        String[] stringArray0 = StringUtils.tokenize("\\");
        boolean boolean0 = StringUtils.isAll("OqY", stringArray0);
        assertFalse(boolean0);
        assertEquals(1, stringArray0.length);
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test13() throws Throwable {
        String[] stringArray0 = StringUtils.tokenize("\r\n");
        assertEquals(0, stringArray0.length);
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test14() throws Throwable {
        String[] stringArray0 = StringUtils.tokenize("");
        boolean boolean0 = StringUtils.isAll("", stringArray0);
        assertFalse(boolean0);
        assertEquals(0, stringArray0.length);
    }

    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test15() throws Throwable {
        String[] stringArray0 = StringUtils.tokenize((String) null);
        assertEquals(0, stringArray0.length);
    }

    @DisabledOnOs({OS.MAC, OS.LINUX})
    @Test
    @Timeout(value = 4000, unit = TimeUnit.MILLISECONDS)
    public void test16() throws Throwable {
        String string0 = StringUtils.fileSeparator();
        assertEquals("\\\\", string0);
    }
}
